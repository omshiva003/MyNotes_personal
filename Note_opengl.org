* OpenGl by Ben Cook Udemy 
** modern OpenGl Techniques
*** Introduction to GLEW, GLFW and SDL

**** What is GLEW?
OpenGL Extension Wrangler
Interface for OpenGL versions above 1.1
Load OpenGL extensions
Some extensions are platform specific, GLEW can check if they exist on that platform
Alternatives: GL3W, glLoadGen, glad, glsdk, glbinding, libepoxy, Glee
Best to use GLEW. Most people do.

***** Using GLEW
#+BEGIN_SRC cpp
#include <GL/glew.h>

// After initialisation OpenGL context: glewExperimental = GL_TRUE;

// glewInit();

// Should return GLEW_OK. If it fails, it returns the error.

// Can read error with glewGetErrorString(result);

// if (!GLEW_EXT_framebuffer_object){} //Check extensions exist:

// wglew.h for Windows only functions

#+END_SRC


**** GLFW
OpenGL FrameWork (...probably)
Handles window creation and control
Pick up and process input from the keyboard, mouse, joystick and gamepad
Even allows multiple monitor support!
Uses OpenGL context for windows

**** SDL(Alternative GLFW)
Simple DirectMedia Layer
Can do almost everything GLFW can do…
and more! (Audio, Threading, Filesystems, etc.)
Very popular, especially for Indie developers
Used in: FTL, Amnesia, Starbound and Dying Light
Even used in level editors for Source Engine and Cryengine!

**** SFmL (Alternatives)
SFML (Simple and Fast Multimedia Library): Like SDL but with even more features
...but the OpenGL context is very weak. Based on 2D only graphics.
GLUT (OpenGL Utility Toolkit): Is no longer maintained. Try to avoid it.
Win32 API: For the purists. Lowest level for window creation. Only attempt if you know what you’re doing!

**** Summary
GLEW (OpenGL Extension Wrangler) lets us interface with modern OpenGL and handle platform-specific extensions safely
GLFW lets us create windows and OpenGL contexts, as well as handle user input
SDL does all that GLFW does, and more
The additional features of SDL are beyond the scope of this course, so we will be using GLFW



** Create Windows and handle input(mouse or keyboard)

** Vertex, Fragment and Geometry Shaders
** Draw 3D
** Use GLm(OpenGl maths library)  
** Translate, rotate and scale models using glm lib
** Use of interpolation
textures and lighting effets
** Use Indexed Draws
** Different types of Projection
Orthographic, or peception mode

** Camera Control and movements 
** Textues mapping 
** Phong Light model
 common light model
** Phong Light model by 3 different sources  
 Directional(Sun), Point(Ligh bolt), and Spot Light(flash, torch) 
** Import Pre-made models (Blender,3D X max )
** Shadow mapping (multi light  source mapping too ) 
** Implement a Skybox (Large World : Sky, clouds, mountains) 
** Theory behind all of this
* Beginner
** Shaders and the Rendering Pipeline

*** What is the Rendering Pipeline?
The Rendering Pipeline is a series of stages that take place in order to render an image to the screen.
Four stages are programmable via “Shaders”.
Shaders are pieces of code written in GLSL (OpenGL Shading Language), or HLSL (High-Level Shading Language) if you’re using Direct3D.
GLSL is based on C.

**** The Rendering Pipeline Stages
- Rendering Pipeling Stages
  - Vertex Specification
  - Vertex Shader (programmable)
  - Tessellation (programmable)
  - Geometry Shader (programmable)
  - Vertex Post-Processing
  - Primitive Assembly
  - Rasterization
  - Fragment Shader (programmable)
  - Per-Sample Operations

*** Vertex Specification
A point in space P(x,y,z)(plural: vertices)
Primitive:  simple shape defined using one or more vertices.
            Usually we use triangles, but we can also use points, lines and quads.
            (default we use Triangles)
            (line: wire frameWork)

Vertex Specification: Setting up the data of the vertices for the primitives we want to render.
                      This is done in application itself 

*** Vertex Specification Consist of 
VAOs (Vertex Array Objects) and VBOs (Vertex Buffer Objects).
VAO defines WHAT data a vertex has (position, colour, texture, normals, etc).
VBO defines the data itself.
Attribute Pointers define where and how shaders can access vertex data.

**** Creating VAO/VBO
1. Generate a VAO ID.(When VAO created in graphic card we can't directly acess but we get ID) 
2. Bind the VAO with that ID.
3. Generate a VBO ID.(Simillar to VAO) 
4. Bind the VBO with that ID (now you’re working on the chosen VBO attached to the chosen VAO).
5. Attach the vertex data to that VBO.
6. Define the Attribute Pointer formatting
7. Enable the Attribute Pointer
8. Unbind the VAO and VBO, ready for the next object to be bound.

**** Initiating Draw
1. Activate Shader Program you want to use.
2. Bind VAO of object you want to draw.
3. Call glDrawArrays, which initiates the rest of the pipeline.

**** Vertex Shader(NOT optional)
Handles vertices individually.
Must store something in gl_Position as it is used by later stages.
Can specify additional outputs that can be picked up and used by user-defined shaders later in pipeline.
Inputs consist of the vertex data itself.
***** Example
#+BEGIN_SRC cpp
#version 330 //4.6 version is also avaiable

layout (location = 0) in vec3 pos;

void main(){
    gl_Position = vec4(pos,1.0);
}
#+END_SRC
**** Tessellation
Allows you to divide up data in to smaller primitives.(Eg: Oceans movements)
Relatively new shader type, appeared in OpenGL 4.0.
Can be used to add higher levels of detail dynamically.
Won’t be used in this course.
**** Geometry Shader
- Vertex Shader handles vertices, Geometry Shader handles primitives (groups of vertices).
- Takes primitives then “emits” their vertices to create the given primitive, or even new primitives.(TRANSFORTION: Rotation,affine,Perspective)
- Can alter data given to it to modify given primitives, or even create new ones.
Can even alter the primitive type (points, lines, triangles, etc).
Will use it once briefly in this course.
**** Vertex Post-Processing
Transform Feedback (if enabled):
Result of Vertex and Geometry stages saved to buffers for later use.
We won’t be using this though…
Clipping:
Primitives that won’t be visible are removed (don’t want to draw things we can’t see!).
Positions converted from “clip-space” to “window space” (more on this later).
**** Primitive Assembly
Vertices are converted in to a series of primitives.
So if rendering triangles… 6 vertices would become 2 triangles (3 vertices each).
Face culling.
Face culling is the removal of primitives that can’t be seen, or are facing “away” from the viewer. We don’t want to draw something if we can’t see it!
*** Rasterization
Converts primitives in to “Fragments”.(Fragment is not pixel )
Fragments are pieces of data for each pixel, obtained from the rasterization process.
Fragment data will be interpolated based on its position relative to each vertex.
*** Fragment Shader
- Handles data for each fragment.
- Is optional but it’s rare to not use it. Exceptions are cases where only depth or stencil data is required (more on depth data later).
- Most important output is the colour of the pixel that the fragment covers.
- Simplest OpenGL programs usually have a Vertex Shader and a Fragment Shader.
**** Fragment Shader: Simple Example
#+BEGIN_SRC cpp
#version 330

out vec4 colour;

void main(){
     colour = vec4(1.0,0.0,0.0,1.0);
}
#+END_SRC
*** Per-Sample Operations
- Series of tests run to see if the fragment should be drawn.
- Most important test: Depth test. Determines if something is in front of the point being drawn.
- Colour Blending: Using defined operations, fragment colours are “blended” together with overlapping fragments. Usually used to handle transparent objects.
- Fragment data written to currently bound Framebuffer (usually the default buffer, more on this later).
- Lastly, in the application code the user usually defines a buffer swap here, putting the newly updated Framebuffer to the front.
- The pipeline is complete!

*** On the Origin of Shaders...
- Shaders Programs are a group of shaders (Vertex, Tessellation, Geometry, Fragment…) associated with one another.
- They are created in OpenGL via a series of functions.
**** Creating a Shader Program
1. Create empty program.
2. Create empty shaders.
3. Attach shader source code to shaders.
4. Compile shaders.
5. Attach shaders to program.
6. Link program (creates executables from shaders and links them together).
7. Validate program (optional but highly advised because debugging shaders is a pain).

**** Using a Shader Program
- When you create a shader, an ID is given (like with VAOs and VBOs).
- Simply call glUseProgram(shaderID)
- All draw calls from then on will use that shader, glUseProgram is used on a new shaderID, or on ‘0’ (meaning ‘no shader’).

*** Summary
- Rendering Pipeline consists of several stages.
- Four stages are programmable via shaders (Vertex, Tessellation, Geometry, Fragment).
- Vertex Shader is mandatory.
- Vertices: User-defined points in space.
- Primitives: Groups of vertices that make a simple shape (usually a triangle).
- Fragments: Per-pixel data created from primitives.
- Vertex Array Object (VAO): WHAT data a vertex has.
- Vertex Buffer Object (VBO): The vertex data itself.
- Shader programs are created with at least a Vertex Shader and then activated before use.


* Brain Will
** 3D Rendering Overview
- Local Space : vertices of individual model define relative to modle's own origin
  - different transform matrix for each rendered instance of each model

- World Space : all models into onespace()
  - C: Transform matrix you would apply to camera
  - Inverse(C): Transform matrix you actally apply to whole world insted
   
- View/Camera Space  : all vertices transformed to account for camera position
  - A projection matrix(depends on orthographic /Perspective,size of image and FOV)

- Screen Space: 3D transfromed into 2D pixels; origin at bottom-left











* PyOpenGl
** Installation
#+BEGIN_SRC sh
# Virtual Environment
conda create --name pyopengl
conda activate pyopengl
conda install pip
# 
pip install PyOpenGL #PyOpenGL_accelerate
# Install GLFW
pip install pyglfw

# For 3D model
pip install pyrr


# For load textures
pip install pillow

# For therory OpenGL by Brain Will

sudo apt-get install -qq cmake freeglut3-dev g++-4.8 gcc-4.8 libfreetype6-dev libglew-dev libglu1-mesa-dev libjpeg8-dev libxcursor-dev libxinerama-dev libxrandr-dev libxxf86vm-dev

wget #url glfw
tar -xvzf glfw-3.3.2.tar.gz
cmake -DBUILD_SHARED_LIBS=ON

pip install glfw
 
#+END_SRC


* Theory of Camera matrix,
http://www.opengl-tutorial.org/


3D -model with mouse and keyboard moving 
https://www.youtube.com/watch?v=g4E9iq0BixA
